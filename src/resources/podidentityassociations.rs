// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium podidentityassociations.eks.services.k8s.aws -A
// kopium version: 0.16.5

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use std::collections::BTreeMap;
use std::hash::Hash;

/// PodIdentityAssociationSpec defines the desired state of PodIdentityAssociation.
///
///
/// Amazon EKS Pod Identity associations provide the ability to manage credentials
/// for your applications, similar to the way that Amazon EC2 instance profiles
/// provide credentials to Amazon EC2 instances.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(
    group = "eks.services.k8s.aws",
    version = "v1alpha1",
    kind = "PodIdentityAssociation",
    plural = "podidentityassociations"
)]
#[kube(namespaced)]
#[kube(status = "PodIdentityAssociationStatus")]
pub struct PodIdentityAssociationSpec {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency
    /// of the request.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientRequestToken"
    )]
    pub client_request_token: Option<String>,
    /// The name of the cluster to create the association in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterName"
    )]
    pub cluster_name: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
    /// type to provide more user friendly syntax for references using 'from' field
    /// Ex:
    /// APIIDRef:
    ///
    ///
    ///     from:
    ///       name: my-api
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterRef"
    )]
    pub cluster_ref: Option<PodIdentityAssociationClusterRef>,
    /// The name of the Kubernetes namespace inside the cluster to create the association
    /// in. The service account and the pods that use the service account must be
    /// in this namespace.
    pub namespace: String,
    /// The Amazon Resource Name (ARN) of the IAM role to associate with the service
    /// account. The EKS Pod Identity agent manages credentials to assume this role
    /// for applications in the containers in the pods that use this service account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleARN")]
    pub role_arn: Option<String>,
    /// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
    /// type to provide more user friendly syntax for references using 'from' field
    /// Ex:
    /// APIIDRef:
    ///
    ///
    ///     from:
    ///       name: my-api
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleRef")]
    pub role_ref: Option<PodIdentityAssociationRoleRef>,
    /// The name of the Kubernetes service account inside the cluster to associate
    /// the IAM credentials with.
    #[serde(rename = "serviceAccount")]
    pub service_account: String,
    /// Metadata that assists with categorization and organization. Each tag consists
    /// of a key and an optional value. You define both. Tags don't propagate to
    /// any other cluster or Amazon Web Services resources.
    ///
    ///
    /// The following basic restrictions apply to tags:
    ///
    ///
    ///   - Maximum number of tags per resource – 50
    ///
    ///
    ///   - For each resource, each tag key must be unique, and each tag key can
    ///     have only one value.
    ///
    ///
    ///   - Maximum key length – 128 Unicode characters in UTF-8
    ///
    ///
    ///   - Maximum value length – 256 Unicode characters in UTF-8
    ///
    ///
    ///   - If your tagging schema is used across multiple services and resources,
    ///     remember that other services may have restrictions on allowed characters.
    ///     Generally allowed characters are: letters, numbers, and spaces representable
    ///     in UTF-8, and the following characters: + - = . _ : / @.
    ///
    ///
    ///   - Tag keys and values are case-sensitive.
    ///
    ///
    ///   - Do not use aws:, AWS:, or any upper or lowercase combination of such
    ///     as a prefix for either keys or values as it is reserved for Amazon Web
    ///     Services use. You cannot edit or delete tag keys or values with this prefix.
    ///     Tags with this prefix do not count against your tags per resource limit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<BTreeMap<String, String>>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
/// type to provide more user friendly syntax for references using 'from' field
/// Ex:
/// APIIDRef:
///
///
///     from:
///       name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PodIdentityAssociationClusterRef {
    /// AWSResourceReference provides all the values necessary to reference another
    /// k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<PodIdentityAssociationClusterRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another
/// k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PodIdentityAssociationClusterRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// AWSResourceReferenceWrapper provides a wrapper around *AWSResourceReference
/// type to provide more user friendly syntax for references using 'from' field
/// Ex:
/// APIIDRef:
///
///
///     from:
///       name: my-api
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PodIdentityAssociationRoleRef {
    /// AWSResourceReference provides all the values necessary to reference another
    /// k8s resource for finding the identifier(Id/ARN/Name)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<PodIdentityAssociationRoleRefFrom>,
}

/// AWSResourceReference provides all the values necessary to reference another
/// k8s resource for finding the identifier(Id/ARN/Name)
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PodIdentityAssociationRoleRefFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// PodIdentityAssociationStatus defines the observed state of PodIdentityAssociation
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema, Hash)]
pub struct PodIdentityAssociationStatus {
    /// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
    /// that is used to contain resource sync state, account ownership,
    /// constructed ARN for the resource
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ackResourceMetadata"
    )]
    pub ack_resource_metadata: Option<PodIdentityAssociationStatusAckResourceMetadata>,
    /// The Amazon Resource Name (ARN) of the association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associationARN"
    )]
    pub association_arn: Option<String>,
    /// The ID of the association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associationID"
    )]
    pub association_id: Option<String>,
    /// All CRS managed by ACK have a common `Status.Conditions` member that
    /// contains a collection of `ackv1alpha1.Condition` objects that describe
    /// the various terminal states of the CR and its backend AWS service API
    /// resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<PodIdentityAssociationStatusConditions>>,
    /// The timestamp that the association was created at.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    pub created_at: Option<String>,
    /// The most recent timestamp that the association was modified at
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modifiedAt"
    )]
    pub modified_at: Option<String>,
}

/// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
/// that is used to contain resource sync state, account ownership,
/// constructed ARN for the resource
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema, Hash)]
pub struct PodIdentityAssociationStatusAckResourceMetadata {
    /// ARN is the Amazon Resource Name for the resource. This is a
    /// globally-unique identifier and is set only by the ACK service controller
    /// once the controller has orchestrated the creation of the resource OR
    /// when it has verified that an "adopted" resource (a resource where the
    /// ARN annotation was set by the Kubernetes user on the CR) exists and
    /// matches the supplied CR's Spec field values.
    /// TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse
    /// https://github.com/aws/aws-controllers-k8s/issues/270
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// OwnerAccountID is the AWS Account ID of the account that owns the
    /// backend AWS service API resource.
    #[serde(rename = "ownerAccountID")]
    pub owner_account_id: String,
    /// Region is the AWS region in which the resource exists or will exist.
    pub region: String,
}

/// Condition is the common struct used by all CRDs managed by ACK service
/// controllers to indicate terminal states  of the CR and its backend AWS
/// service API resource
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema, Hash)]
pub struct PodIdentityAssociationStatusConditions {
    /// Last time the condition transitioned from one status to another.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastTransitionTime"
    )]
    pub last_transition_time: Option<String>,
    /// A human readable message indicating details about the transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The reason for the condition's last transition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    pub status: String,
    /// Type is the type of the Condition
    #[serde(rename = "type")]
    pub r#type: String,
}
